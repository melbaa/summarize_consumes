name: make-release
run-name: ${{ github.actor }} making a release
on: [push]
jobs:
  make-artifact:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            pyinstaller_cmd: pyinstaller.exe
            main_path: .\src\melbalabs\summarize_consumes\main.py
            executable_name: summarize_consumes
          - os: ubuntu-latest
            pyinstaller_cmd: pyinstaller
            main_path: ./src/melbalabs/summarize_consumes/main.py
            executable_name: summarize_consumes_linux
            container: python:3.10-slim-buster
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v4

      - name: set up linux deps
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "$PATH"

          apt-get update
          apt-get install -y --no-install-recommends binutils coreutils

          python -m ensurepip --upgrade
          pip install --upgrade pip

      - uses: actions/setup-python@v5
        if: matrix.os != 'ubuntu-latest'
        with:
          python-version: '3.10'

      - run: pip install .[dev,release]
      - run: pytest -v
      - run: ${{ matrix.pyinstaller_cmd }} -F --name ${{ matrix.executable_name }} --copy-metadata melbalabs.summarize_consumes ${{ matrix.main_path }}
      - run: ls ./dist/
        shell: bash
      - name: compute ARTIFACT_NAME and ARTIFACT_PATH
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # set linux artifact name with arch and glibc version
            dist_path=./dist/${{ matrix.executable_name }}
            arch=$(arch)
            glibc_version=$(getconf GNU_LIBC_VERSION | awk '{gsub(/\./, "_"); print $NF}')
            original_name="${{ matrix.executable_name }}"
            suffix="${arch}_glibc${glibc_version}"
            new_name="${original_name}_$suffix"
            new_path="${dist_path}_$suffix"
            mv "${dist_path}" "$new_path"
            echo "ARTIFACT_NAME=${new_name}" >> $GITHUB_ENV
            echo "ARTIFACT_PATH=${new_path}" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=${{ matrix.executable_name }}.exe" >> $GITHUB_ENV
            echo "ARTIFACT_PATH=.\dist\${{ matrix.executable_name }}.exe" >> $GITHUB_ENV
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

  make-release:
    needs: make-artifact
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Prepare release files
        shell: bash
        run: |
          mkdir -p release_files
          cp artifacts/*/* release_files/
          ls -l release_files/
      - name: Determine release type and name
        id: determine_release
        shell: bash
        run: |
          release_type="prerelease"
          release_name="prerelease"
          tag_name="prerelease"
          make_latest="false"

          if [[ "${{ github.ref_name }}" == "master" ]]; then
            release_type="latest"
            release_name="latest"
            tag_name="latest"
            make_latest="true"
          fi

          echo "release_type=${release_type}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}" >> $GITHUB_OUTPUT
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
          echo "make_latest=${make_latest}" >> $GITHUB_OUTPUT

      - name: Delete previous release
        shell: bash
        run: |
          release_name="${{ steps.determine_release.outputs.release_name }}"
          tag_name="${{ steps.determine_release.outputs.tag_name }}"
          gh release delete $release_name --cleanup-tag --yes || true
          git push --delete origin refs/tags/$tag_name || true

          check_release_deleted() {
              local start_time=$SECONDS
              local timeout=20
              release_deleted=0
              tag_deleted=0

              while true; do
                  if ! gh release view $release_name > /dev/null 2>&1; then
                      echo "Release deleted successfully."
                      release_deleted=1
                  fi

                  if ! git ls-remote origin refs/tags/$tag_name | grep -q $tag_name; then
                      echo "Tag deleted successfully."
                      tag_deleted=1
                  fi

                  if [[ $release_deleted -eq 1 && $tag_deleted -eq 1 ]]; then
                      return 0
                  fi

                  local elapsed_time=$((SECONDS - start_time))
                  if [[ $elapsed_time -ge $timeout ]]; then
                      echo "Timeout: Release deletion check failed after $timeout seconds."
                      exit 1
                  fi

                  echo "Waiting for release to be deleted..."
                  sleep 2
              done
          }

          check_release_deleted
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GH_REPO: "${{ github.repository }}"

      - name: Create Release
        uses: softprops/action-gh-release@v2.2.1
        with:
          name: ${{ steps.determine_release.outputs.release_name }}
          tag_name: ${{ steps.determine_release.outputs.tag_name }}
          prerelease: ${{ steps.determine_release.outputs.release_type == 'prerelease' }}
          make_latest: ${{ steps.determine_release.outputs.make_latest }}
          target_commitish: ${{ github.sha }}
          token: "${{ secrets.GITHUB_TOKEN }}"
          files: |
            release_files/*
